### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Action {
  campaign: CampaignEntityResponse
  content: [ActionContentDynamicZone]!
  coordinates: String
  createdAt: DateTime
  end: DateTime
  group: GroupEntityResponse
  intro: String
  link: String
  locale: String
  localizations(filters: ActionFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ActionRelationResponseCollection
  location: String!
  location_detail: String
  metadata: ComponentSeoSeoSmo
  publishedAt: DateTime
  slug: String!
  start: DateTime!
  title: String!
  updatedAt: DateTime
}

union ActionContentDynamicZone = ComponentSharedBlocksAccordion | ComponentSharedBlocksActions | ComponentSharedBlocksContact | ComponentSharedBlocksEmbed | ComponentSharedBlocksHeading | ComponentSharedBlocksMaterial | ComponentSharedBlocksMedia | ComponentSharedBlocksMediaGallery | ComponentSharedBlocksNewsletter | ComponentSharedBlocksRichtext | ComponentSharedBlocksTeaserLarge | ComponentSharedBlocksTeasersSmall | ComponentSharedBlocksUnterbrecher | Error

scalar ActionContentDynamicZoneInput

type ActionEntity {
  attributes: Action
  id: ID
}

type ActionEntityResponse {
  data: ActionEntity
}

type ActionEntityResponseCollection {
  data: [ActionEntity!]!
  meta: ResponseCollectionMeta!
}

input ActionFiltersInput {
  and: [ActionFiltersInput]
  campaign: CampaignFiltersInput
  coordinates: StringFilterInput
  createdAt: DateTimeFilterInput
  end: DateTimeFilterInput
  group: GroupFiltersInput
  id: IDFilterInput
  intro: StringFilterInput
  link: StringFilterInput
  locale: StringFilterInput
  localizations: ActionFiltersInput
  location: StringFilterInput
  location_detail: StringFilterInput
  metadata: ComponentSeoSeoSmoFiltersInput
  not: ActionFiltersInput
  or: [ActionFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  start: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ActionInput {
  campaign: ID
  content: [ActionContentDynamicZoneInput!]
  coordinates: String
  end: DateTime
  group: ID
  intro: String
  link: String
  location: String
  location_detail: String
  metadata: ComponentSeoSeoSmoInput
  publishedAt: DateTime
  slug: String
  start: DateTime
  title: String
}

type ActionRelationResponseCollection {
  data: [ActionEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type Campaign {
  actions(filters: ActionFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ActionRelationResponseCollection
  content: [CampaignContentDynamicZone]
  createdAt: DateTime
  locale: String
  localizations(filters: CampaignFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CampaignRelationResponseCollection
  metadata: ComponentSeoSeoSmo
  publishedAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

union CampaignContentDynamicZone = ComponentSharedBlocksAccordion | ComponentSharedBlocksActions | ComponentSharedBlocksContact | ComponentSharedBlocksEmbed | ComponentSharedBlocksHeading | ComponentSharedBlocksMaterial | ComponentSharedBlocksMedia | ComponentSharedBlocksMediaGallery | ComponentSharedBlocksNewsletter | ComponentSharedBlocksRichtext | ComponentSharedBlocksStageLarge | ComponentSharedBlocksStageMedium | ComponentSharedBlocksTeaserLarge | ComponentSharedBlocksTeasersSmall | ComponentSharedBlocksUnterbrecher | Error

scalar CampaignContentDynamicZoneInput

type CampaignEntity {
  attributes: Campaign
  id: ID
}

type CampaignEntityResponse {
  data: CampaignEntity
}

type CampaignEntityResponseCollection {
  data: [CampaignEntity!]!
  meta: ResponseCollectionMeta!
}

input CampaignFiltersInput {
  actions: ActionFiltersInput
  and: [CampaignFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: CampaignFiltersInput
  metadata: ComponentSeoSeoSmoFiltersInput
  not: CampaignFiltersInput
  or: [CampaignFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input CampaignInput {
  actions: [ID]
  content: [CampaignContentDynamicZoneInput!]
  metadata: ComponentSeoSeoSmoInput
  publishedAt: DateTime
  slug: String
  title: String
}

type CampaignRelationResponseCollection {
  data: [CampaignEntity!]!
}

type City {
  coordinates: String!
  createdAt: DateTime
  federal_country: FederalCountryEntityResponse
  group: GroupEntityResponse
  is_city_state: Boolean!
  locale: String
  localizations(filters: CityFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CityRelationResponseCollection
  name: String!
  publishedAt: DateTime
  safe_harbour: SafeHarbourEntityResponse
  slug: String!
  updatedAt: DateTime
}

type CityEntity {
  attributes: City
  id: ID
}

type CityEntityResponse {
  data: CityEntity
}

type CityEntityResponseCollection {
  data: [CityEntity!]!
  meta: ResponseCollectionMeta!
}

input CityFiltersInput {
  and: [CityFiltersInput]
  coordinates: StringFilterInput
  createdAt: DateTimeFilterInput
  federal_country: FederalCountryFiltersInput
  group: GroupFiltersInput
  id: IDFilterInput
  is_city_state: BooleanFilterInput
  locale: StringFilterInput
  localizations: CityFiltersInput
  name: StringFilterInput
  not: CityFiltersInput
  or: [CityFiltersInput]
  publishedAt: DateTimeFilterInput
  safe_harbour: SafeHarbourFiltersInput
  slug: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input CityInput {
  coordinates: String
  federal_country: ID
  group: ID
  is_city_state: Boolean
  name: String
  publishedAt: DateTime
  safe_harbour: ID
  slug: String
}

type CityRelationResponseCollection {
  data: [CityEntity!]!
}

type ComponentAccordionItem {
  content: String!
  id: ID!
  title: String!
}

input ComponentAccordionItemFiltersInput {
  and: [ComponentAccordionItemFiltersInput]
  content: StringFilterInput
  not: ComponentAccordionItemFiltersInput
  or: [ComponentAccordionItemFiltersInput]
  title: StringFilterInput
}

input ComponentAccordionItemInput {
  content: String
  id: ID
  title: String
}

type ComponentActionsFilter {
  connect_via: ENUM_COMPONENTACTIONSFILTER_CONNECT_VIA
  id: ID!
  key: ENUM_COMPONENTACTIONSFILTER_KEY
  value: String
}

input ComponentActionsFilterFiltersInput {
  and: [ComponentActionsFilterFiltersInput]
  connect_via: StringFilterInput
  key: StringFilterInput
  not: ComponentActionsFilterFiltersInput
  or: [ComponentActionsFilterFiltersInput]
  value: StringFilterInput
}

input ComponentActionsFilterInput {
  connect_via: ENUM_COMPONENTACTIONSFILTER_CONNECT_VIA
  id: ID
  key: ENUM_COMPONENTACTIONSFILTER_KEY
  value: String
}

type ComponentDemandsDemands {
  admission_in_addition_quota_decided: Boolean
  admission_in_addition_quota_fullfilled: Boolean
  admission_program_decided: Boolean
  admission_program_fullfilled: Boolean
  alliance_safe_harbours_decided: Boolean
  alliance_safe_harbours_fullfilled: Boolean
  communal_reception_decided: Boolean
  communal_reception_fullfilled: Boolean
  cta: ComponentHelperBlocksLink
  id: ID!
  last_updated: DateTime
  national_international_networking_decided: Boolean
  national_international_networking_fullfilled: Boolean
  public_solidarity_declaration_decided: Boolean
  public_solidarity_declaration_fullfilled: Boolean
  supports_searescue_actively_decided: Boolean
  supports_searescue_actively_fullfilled: Boolean
  transparency_decided: Boolean
  transparency_fullfilled: Boolean
}

input ComponentDemandsDemandsFiltersInput {
  admission_in_addition_quota_decided: BooleanFilterInput
  admission_in_addition_quota_fullfilled: BooleanFilterInput
  admission_program_decided: BooleanFilterInput
  admission_program_fullfilled: BooleanFilterInput
  alliance_safe_harbours_decided: BooleanFilterInput
  alliance_safe_harbours_fullfilled: BooleanFilterInput
  and: [ComponentDemandsDemandsFiltersInput]
  communal_reception_decided: BooleanFilterInput
  communal_reception_fullfilled: BooleanFilterInput
  cta: ComponentHelperBlocksLinkFiltersInput
  last_updated: DateTimeFilterInput
  national_international_networking_decided: BooleanFilterInput
  national_international_networking_fullfilled: BooleanFilterInput
  not: ComponentDemandsDemandsFiltersInput
  or: [ComponentDemandsDemandsFiltersInput]
  public_solidarity_declaration_decided: BooleanFilterInput
  public_solidarity_declaration_fullfilled: BooleanFilterInput
  supports_searescue_actively_decided: BooleanFilterInput
  supports_searescue_actively_fullfilled: BooleanFilterInput
  transparency_decided: BooleanFilterInput
  transparency_fullfilled: BooleanFilterInput
}

input ComponentDemandsDemandsInput {
  admission_in_addition_quota_decided: Boolean
  admission_in_addition_quota_fullfilled: Boolean
  admission_program_decided: Boolean
  admission_program_fullfilled: Boolean
  alliance_safe_harbours_decided: Boolean
  alliance_safe_harbours_fullfilled: Boolean
  communal_reception_decided: Boolean
  communal_reception_fullfilled: Boolean
  cta: ComponentHelperBlocksLinkInput
  id: ID
  last_updated: DateTime
  national_international_networking_decided: Boolean
  national_international_networking_fullfilled: Boolean
  public_solidarity_declaration_decided: Boolean
  public_solidarity_declaration_fullfilled: Boolean
  supports_searescue_actively_decided: Boolean
  supports_searescue_actively_fullfilled: Boolean
  transparency_decided: Boolean
  transparency_fullfilled: Boolean
}

type ComponentHelperBlocksLink {
  id: ID!
  label: String!
  locale: ENUM_COMPONENTHELPERBLOCKSLINK_LOCALE
  url: String!
}

input ComponentHelperBlocksLinkFiltersInput {
  and: [ComponentHelperBlocksLinkFiltersInput]
  label: StringFilterInput
  locale: StringFilterInput
  not: ComponentHelperBlocksLinkFiltersInput
  or: [ComponentHelperBlocksLinkFiltersInput]
  url: StringFilterInput
}

input ComponentHelperBlocksLinkInput {
  id: ID
  label: String
  locale: ENUM_COMPONENTHELPERBLOCKSLINK_LOCALE
  url: String
}

type ComponentHelperBlocksMedia {
  caption: String
  id: ID!
  media: UploadFileEntityResponse!
}

input ComponentHelperBlocksMediaFiltersInput {
  and: [ComponentHelperBlocksMediaFiltersInput]
  caption: StringFilterInput
  not: ComponentHelperBlocksMediaFiltersInput
  or: [ComponentHelperBlocksMediaFiltersInput]
}

input ComponentHelperBlocksMediaInput {
  caption: String
  id: ID
  media: ID
}

type ComponentMaterialItem {
  description: String
  external_link: String
  file: UploadFileEntityResponse
  id: ID!
  name: String
}

input ComponentMaterialItemFiltersInput {
  and: [ComponentMaterialItemFiltersInput]
  description: StringFilterInput
  external_link: StringFilterInput
  name: StringFilterInput
  not: ComponentMaterialItemFiltersInput
  or: [ComponentMaterialItemFiltersInput]
}

input ComponentMaterialItemInput {
  description: String
  external_link: String
  file: ID
  id: ID
  name: String
}

type ComponentMenuMenu {
  id: ID!
  items(filters: ComponentHelperBlocksLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHelperBlocksLink]!
  location: ENUM_COMPONENTMENUMENU_LOCATION
  title: String
}

input ComponentMenuMenuFiltersInput {
  and: [ComponentMenuMenuFiltersInput]
  items: ComponentHelperBlocksLinkFiltersInput
  location: StringFilterInput
  not: ComponentMenuMenuFiltersInput
  or: [ComponentMenuMenuFiltersInput]
  title: StringFilterInput
}

input ComponentMenuMenuInput {
  id: ID
  items: [ComponentHelperBlocksLinkInput]
  location: ENUM_COMPONENTMENUMENU_LOCATION
  title: String
}

type ComponentSeoSeoSmo {
  description: String
  facebook_description: String
  facebook_image: UploadFileEntityResponse
  facebook_title: String
  id: ID!
  twitter_description: String
  twitter_image: UploadFileEntityResponse
  twitter_title: String
}

input ComponentSeoSeoSmoFiltersInput {
  and: [ComponentSeoSeoSmoFiltersInput]
  description: StringFilterInput
  facebook_description: StringFilterInput
  facebook_title: StringFilterInput
  not: ComponentSeoSeoSmoFiltersInput
  or: [ComponentSeoSeoSmoFiltersInput]
  twitter_description: StringFilterInput
  twitter_title: StringFilterInput
}

input ComponentSeoSeoSmoInput {
  description: String
  facebook_description: String
  facebook_image: ID
  facebook_title: String
  id: ID
  twitter_description: String
  twitter_image: ID
  twitter_title: String
}

type ComponentSharedBlocksAccordion {
  id: ID!
  items(filters: ComponentAccordionItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentAccordionItem]
}

input ComponentSharedBlocksAccordionFiltersInput {
  and: [ComponentSharedBlocksAccordionFiltersInput]
  items: ComponentAccordionItemFiltersInput
  not: ComponentSharedBlocksAccordionFiltersInput
  or: [ComponentSharedBlocksAccordionFiltersInput]
}

input ComponentSharedBlocksAccordionInput {
  id: ID
  items: [ComponentAccordionItemInput]
}

type ComponentSharedBlocksActions {
  cta: ComponentHelperBlocksLink
  filter(filters: ComponentActionsFilterFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentActionsFilter]
  id: ID!
  max_actions_to_show: Int
  show_map: Boolean!
}

input ComponentSharedBlocksActionsFiltersInput {
  and: [ComponentSharedBlocksActionsFiltersInput]
  cta: ComponentHelperBlocksLinkFiltersInput
  filter: ComponentActionsFilterFiltersInput
  max_actions_to_show: IntFilterInput
  not: ComponentSharedBlocksActionsFiltersInput
  or: [ComponentSharedBlocksActionsFiltersInput]
  show_map: BooleanFilterInput
}

input ComponentSharedBlocksActionsInput {
  cta: ComponentHelperBlocksLinkInput
  filter: [ComponentActionsFilterInput]
  id: ID
  max_actions_to_show: Int
  show_map: Boolean
}

type ComponentSharedBlocksContact {
  email: String
  facebook: String
  id: ID!
  instagram: String
  mastodon: String
  telephone: String
  twitter: String
  youtube: String
}

input ComponentSharedBlocksContactFiltersInput {
  and: [ComponentSharedBlocksContactFiltersInput]
  email: StringFilterInput
  facebook: StringFilterInput
  instagram: StringFilterInput
  mastodon: StringFilterInput
  not: ComponentSharedBlocksContactFiltersInput
  or: [ComponentSharedBlocksContactFiltersInput]
  telephone: StringFilterInput
  twitter: StringFilterInput
  youtube: StringFilterInput
}

input ComponentSharedBlocksContactInput {
  email: String
  facebook: String
  id: ID
  instagram: String
  mastodon: String
  telephone: String
  twitter: String
  youtube: String
}

type ComponentSharedBlocksEmbed {
  embed_data: String
  id: ID!
}

input ComponentSharedBlocksEmbedFiltersInput {
  and: [ComponentSharedBlocksEmbedFiltersInput]
  embed_data: StringFilterInput
  not: ComponentSharedBlocksEmbedFiltersInput
  or: [ComponentSharedBlocksEmbedFiltersInput]
}

input ComponentSharedBlocksEmbedInput {
  embed_data: String
  id: ID
}

type ComponentSharedBlocksFundraisingbox {
  id: ID!
  script_url: String!
}

input ComponentSharedBlocksFundraisingboxFiltersInput {
  and: [ComponentSharedBlocksFundraisingboxFiltersInput]
  not: ComponentSharedBlocksFundraisingboxFiltersInput
  or: [ComponentSharedBlocksFundraisingboxFiltersInput]
  script_url: StringFilterInput
}

input ComponentSharedBlocksFundraisingboxInput {
  id: ID
  script_url: String
}

type ComponentSharedBlocksHeading {
  id: ID!
  kicker: String
  level: ENUM_COMPONENTSHAREDBLOCKSHEADING_LEVEL!
  text: String!
}

input ComponentSharedBlocksHeadingFiltersInput {
  and: [ComponentSharedBlocksHeadingFiltersInput]
  kicker: StringFilterInput
  level: StringFilterInput
  not: ComponentSharedBlocksHeadingFiltersInput
  or: [ComponentSharedBlocksHeadingFiltersInput]
  text: StringFilterInput
}

input ComponentSharedBlocksHeadingInput {
  id: ID
  kicker: String
  level: ENUM_COMPONENTSHAREDBLOCKSHEADING_LEVEL
  text: String
}

type ComponentSharedBlocksMaterial {
  id: ID!
  items(filters: ComponentMaterialItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentMaterialItem]!
  title: String
}

input ComponentSharedBlocksMaterialFiltersInput {
  and: [ComponentSharedBlocksMaterialFiltersInput]
  items: ComponentMaterialItemFiltersInput
  not: ComponentSharedBlocksMaterialFiltersInput
  or: [ComponentSharedBlocksMaterialFiltersInput]
  title: StringFilterInput
}

input ComponentSharedBlocksMaterialInput {
  id: ID
  items: [ComponentMaterialItemInput]
  title: String
}

type ComponentSharedBlocksMedia {
  id: ID!
  image: ComponentHelperBlocksMedia
}

input ComponentSharedBlocksMediaFiltersInput {
  and: [ComponentSharedBlocksMediaFiltersInput]
  image: ComponentHelperBlocksMediaFiltersInput
  not: ComponentSharedBlocksMediaFiltersInput
  or: [ComponentSharedBlocksMediaFiltersInput]
}

type ComponentSharedBlocksMediaGallery {
  id: ID!
  items(filters: ComponentHelperBlocksMediaFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHelperBlocksMedia]!
  layout: ENUM_COMPONENTSHAREDBLOCKSMEDIAGALLERY_LAYOUT!
}

input ComponentSharedBlocksMediaGalleryFiltersInput {
  and: [ComponentSharedBlocksMediaGalleryFiltersInput]
  items: ComponentHelperBlocksMediaFiltersInput
  layout: StringFilterInput
  not: ComponentSharedBlocksMediaGalleryFiltersInput
  or: [ComponentSharedBlocksMediaGalleryFiltersInput]
}

input ComponentSharedBlocksMediaGalleryInput {
  id: ID
  items: [ComponentHelperBlocksMediaInput]
  layout: ENUM_COMPONENTSHAREDBLOCKSMEDIAGALLERY_LAYOUT
}

input ComponentSharedBlocksMediaInput {
  id: ID
  image: ComponentHelperBlocksMediaInput
}

type ComponentSharedBlocksNewsletter {
  id: ID!
  intro: String
  title: String!
}

input ComponentSharedBlocksNewsletterFiltersInput {
  and: [ComponentSharedBlocksNewsletterFiltersInput]
  intro: StringFilterInput
  not: ComponentSharedBlocksNewsletterFiltersInput
  or: [ComponentSharedBlocksNewsletterFiltersInput]
  title: StringFilterInput
}

input ComponentSharedBlocksNewsletterInput {
  id: ID
  intro: String
  title: String
}

type ComponentSharedBlocksRichtext {
  id: ID!
  richtext: String!
}

input ComponentSharedBlocksRichtextFiltersInput {
  and: [ComponentSharedBlocksRichtextFiltersInput]
  not: ComponentSharedBlocksRichtextFiltersInput
  or: [ComponentSharedBlocksRichtextFiltersInput]
  richtext: StringFilterInput
}

input ComponentSharedBlocksRichtextInput {
  id: ID
  richtext: String
}

type ComponentSharedBlocksStageLarge {
  cta: ComponentHelperBlocksLink
  heading: ComponentSharedBlocksHeading
  id: ID!
  image: ComponentHelperBlocksMedia
  intro: String
  subnavigation(filters: ComponentHelperBlocksLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHelperBlocksLink]
}

input ComponentSharedBlocksStageLargeFiltersInput {
  and: [ComponentSharedBlocksStageLargeFiltersInput]
  cta: ComponentHelperBlocksLinkFiltersInput
  heading: ComponentSharedBlocksHeadingFiltersInput
  image: ComponentHelperBlocksMediaFiltersInput
  intro: StringFilterInput
  not: ComponentSharedBlocksStageLargeFiltersInput
  or: [ComponentSharedBlocksStageLargeFiltersInput]
  subnavigation: ComponentHelperBlocksLinkFiltersInput
}

input ComponentSharedBlocksStageLargeInput {
  cta: ComponentHelperBlocksLinkInput
  heading: ComponentSharedBlocksHeadingInput
  id: ID
  image: ComponentHelperBlocksMediaInput
  intro: String
  subnavigation: [ComponentHelperBlocksLinkInput]
}

type ComponentSharedBlocksStageMedium {
  id: ID!
  image: ComponentHelperBlocksMedia
  intro: String
  kicker: String
  layout: ENUM_COMPONENTSHAREDBLOCKSSTAGEMEDIUM_LAYOUT!
  title: String!
}

input ComponentSharedBlocksStageMediumFiltersInput {
  and: [ComponentSharedBlocksStageMediumFiltersInput]
  image: ComponentHelperBlocksMediaFiltersInput
  intro: StringFilterInput
  kicker: StringFilterInput
  layout: StringFilterInput
  not: ComponentSharedBlocksStageMediumFiltersInput
  or: [ComponentSharedBlocksStageMediumFiltersInput]
  title: StringFilterInput
}

input ComponentSharedBlocksStageMediumInput {
  id: ID
  image: ComponentHelperBlocksMediaInput
  intro: String
  kicker: String
  layout: ENUM_COMPONENTSHAREDBLOCKSSTAGEMEDIUM_LAYOUT
  title: String
}

type ComponentSharedBlocksSubNavigation {
  id: ID!
  items(filters: ComponentHelperBlocksLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentHelperBlocksLink]!
}

input ComponentSharedBlocksSubNavigationFiltersInput {
  and: [ComponentSharedBlocksSubNavigationFiltersInput]
  items: ComponentHelperBlocksLinkFiltersInput
  not: ComponentSharedBlocksSubNavigationFiltersInput
  or: [ComponentSharedBlocksSubNavigationFiltersInput]
}

input ComponentSharedBlocksSubNavigationInput {
  id: ID
  items: [ComponentHelperBlocksLinkInput]
}

type ComponentSharedBlocksTeaserLarge {
  cta: ComponentHelperBlocksLink!
  id: ID!
  intro: String
  title: String!
  type: ENUM_COMPONENTSHAREDBLOCKSTEASERLARGE_TYPE!
}

input ComponentSharedBlocksTeaserLargeFiltersInput {
  and: [ComponentSharedBlocksTeaserLargeFiltersInput]
  cta: ComponentHelperBlocksLinkFiltersInput
  intro: StringFilterInput
  not: ComponentSharedBlocksTeaserLargeFiltersInput
  or: [ComponentSharedBlocksTeaserLargeFiltersInput]
  title: StringFilterInput
  type: StringFilterInput
}

input ComponentSharedBlocksTeaserLargeInput {
  cta: ComponentHelperBlocksLinkInput
  id: ID
  intro: String
  title: String
  type: ENUM_COMPONENTSHAREDBLOCKSTEASERLARGE_TYPE
}

type ComponentSharedBlocksTeasersSmall {
  columns: Int
  id: ID!
  items(filters: ComponentTeasersSmallItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentTeasersSmallItem]
}

input ComponentSharedBlocksTeasersSmallFiltersInput {
  and: [ComponentSharedBlocksTeasersSmallFiltersInput]
  columns: IntFilterInput
  items: ComponentTeasersSmallItemFiltersInput
  not: ComponentSharedBlocksTeasersSmallFiltersInput
  or: [ComponentSharedBlocksTeasersSmallFiltersInput]
}

input ComponentSharedBlocksTeasersSmallInput {
  columns: Int
  id: ID
  items: [ComponentTeasersSmallItemInput]
}

type ComponentSharedBlocksUnterbrecher {
  cta: ComponentHelperBlocksLink
  id: ID!
  image: ComponentHelperBlocksMedia
  intro: String
  orientation_reversed: Boolean
  size: ENUM_COMPONENTSHAREDBLOCKSUNTERBRECHER_SIZE
  title: ComponentSharedBlocksHeading!
  type: ENUM_COMPONENTSHAREDBLOCKSUNTERBRECHER_TYPE!
}

input ComponentSharedBlocksUnterbrecherFiltersInput {
  and: [ComponentSharedBlocksUnterbrecherFiltersInput]
  cta: ComponentHelperBlocksLinkFiltersInput
  image: ComponentHelperBlocksMediaFiltersInput
  intro: StringFilterInput
  not: ComponentSharedBlocksUnterbrecherFiltersInput
  or: [ComponentSharedBlocksUnterbrecherFiltersInput]
  orientation_reversed: BooleanFilterInput
  size: StringFilterInput
  title: ComponentSharedBlocksHeadingFiltersInput
  type: StringFilterInput
}

input ComponentSharedBlocksUnterbrecherInput {
  cta: ComponentHelperBlocksLinkInput
  id: ID
  image: ComponentHelperBlocksMediaInput
  intro: String
  orientation_reversed: Boolean
  size: ENUM_COMPONENTSHAREDBLOCKSUNTERBRECHER_SIZE
  title: ComponentSharedBlocksHeadingInput
  type: ENUM_COMPONENTSHAREDBLOCKSUNTERBRECHER_TYPE
}

type ComponentTeasersSmallItem {
  id: ID!
  link: ComponentHelperBlocksLink
  text: String
  title: String!
  type: ENUM_COMPONENTTEASERSSMALLITEM_TYPE!
}

input ComponentTeasersSmallItemFiltersInput {
  and: [ComponentTeasersSmallItemFiltersInput]
  link: ComponentHelperBlocksLinkFiltersInput
  not: ComponentTeasersSmallItemFiltersInput
  or: [ComponentTeasersSmallItemFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
  type: StringFilterInput
}

input ComponentTeasersSmallItemInput {
  id: ID
  link: ComponentHelperBlocksLinkInput
  text: String
  title: String
  type: ENUM_COMPONENTTEASERSSMALLITEM_TYPE
}

type Country {
  content: [CountryContentDynamicZone]
  createdAt: DateTime
  federal_countries(filters: FederalCountryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): FederalCountryRelationResponseCollection
  locale: String
  localizations(filters: CountryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CountryRelationResponseCollection
  metadata: ComponentSeoSeoSmo
  name: String!
  publishedAt: DateTime
  slug: String!
  updatedAt: DateTime
}

union CountryContentDynamicZone = ComponentSharedBlocksAccordion | ComponentSharedBlocksActions | ComponentSharedBlocksContact | ComponentSharedBlocksEmbed | ComponentSharedBlocksHeading | ComponentSharedBlocksMaterial | ComponentSharedBlocksMedia | ComponentSharedBlocksMediaGallery | ComponentSharedBlocksNewsletter | ComponentSharedBlocksRichtext | ComponentSharedBlocksStageLarge | ComponentSharedBlocksStageMedium | ComponentSharedBlocksTeaserLarge | ComponentSharedBlocksTeasersSmall | ComponentSharedBlocksUnterbrecher | Error

scalar CountryContentDynamicZoneInput

type CountryEntity {
  attributes: Country
  id: ID
}

type CountryEntityResponse {
  data: CountryEntity
}

type CountryEntityResponseCollection {
  data: [CountryEntity!]!
  meta: ResponseCollectionMeta!
}

input CountryFiltersInput {
  and: [CountryFiltersInput]
  createdAt: DateTimeFilterInput
  federal_countries: FederalCountryFiltersInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: CountryFiltersInput
  metadata: ComponentSeoSeoSmoFiltersInput
  name: StringFilterInput
  not: CountryFiltersInput
  or: [CountryFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input CountryInput {
  content: [CountryContentDynamicZoneInput!]
  federal_countries: [ID]
  metadata: ComponentSeoSeoSmoInput
  name: String
  publishedAt: DateTime
  slug: String
}

type CountryRelationResponseCollection {
  data: [CountryEntity!]!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_COMPONENTACTIONSFILTER_CONNECT_VIA {
  and
  or
}

enum ENUM_COMPONENTACTIONSFILTER_KEY {
  campaign
  group
  location
}

enum ENUM_COMPONENTHELPERBLOCKSLINK_LOCALE {
  context
  de
  en
}

enum ENUM_COMPONENTMENUMENU_LOCATION {
  donation
  footer_about
  footer_meta
  footer_take_part
  header_main
  header_meta
}

enum ENUM_COMPONENTSHAREDBLOCKSHEADING_LEVEL {
  h1
  h2
  h3
  h4
}

enum ENUM_COMPONENTSHAREDBLOCKSMEDIAGALLERY_LAYOUT {
  Carousel
  Compact
}

enum ENUM_COMPONENTSHAREDBLOCKSSTAGEMEDIUM_LAYOUT {
  Cover_Image
  Thumbnail_Image
}

enum ENUM_COMPONENTSHAREDBLOCKSTEASERLARGE_TYPE {
  action
  campaign
  general
  internal
}

enum ENUM_COMPONENTSHAREDBLOCKSUNTERBRECHER_SIZE {
  large
  small
}

enum ENUM_COMPONENTSHAREDBLOCKSUNTERBRECHER_TYPE {
  action
  campaign
  internal
}

enum ENUM_COMPONENTTEASERSSMALLITEM_TYPE {
  action
  campaign
  internal
}

enum ENUM_NEWSENTRY_TYPE {
  commentary
  news
  pressrelease
}

enum ENUM_REDIRECT_TYPE {
  permanently
  temporarily
}

type Error {
  code: String!
  message: String
}

type FederalCountry {
  cities(filters: CityFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CityRelationResponseCollection
  content: [FederalCountryContentDynamicZone]
  country: CountryEntityResponse
  createdAt: DateTime
  demands: ComponentDemandsDemands
  locale: String
  localizations(filters: FederalCountryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): FederalCountryRelationResponseCollection
  metadata: ComponentSeoSeoSmo
  name: String!
  publishedAt: DateTime
  slug: String
  updatedAt: DateTime
}

union FederalCountryContentDynamicZone = ComponentSharedBlocksAccordion | ComponentSharedBlocksActions | ComponentSharedBlocksContact | ComponentSharedBlocksEmbed | ComponentSharedBlocksHeading | ComponentSharedBlocksMaterial | ComponentSharedBlocksMedia | ComponentSharedBlocksMediaGallery | ComponentSharedBlocksNewsletter | ComponentSharedBlocksRichtext | ComponentSharedBlocksStageLarge | ComponentSharedBlocksStageMedium | ComponentSharedBlocksTeaserLarge | ComponentSharedBlocksTeasersSmall | ComponentSharedBlocksUnterbrecher | Error

scalar FederalCountryContentDynamicZoneInput

type FederalCountryEntity {
  attributes: FederalCountry
  id: ID
}

type FederalCountryEntityResponse {
  data: FederalCountryEntity
}

type FederalCountryEntityResponseCollection {
  data: [FederalCountryEntity!]!
  meta: ResponseCollectionMeta!
}

input FederalCountryFiltersInput {
  and: [FederalCountryFiltersInput]
  cities: CityFiltersInput
  country: CountryFiltersInput
  createdAt: DateTimeFilterInput
  demands: ComponentDemandsDemandsFiltersInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: FederalCountryFiltersInput
  metadata: ComponentSeoSeoSmoFiltersInput
  name: StringFilterInput
  not: FederalCountryFiltersInput
  or: [FederalCountryFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input FederalCountryInput {
  cities: [ID]
  content: [FederalCountryContentDynamicZoneInput!]
  country: ID
  demands: ComponentDemandsDemandsInput
  metadata: ComponentSeoSeoSmoInput
  name: String
  publishedAt: DateTime
  slug: String
}

type FederalCountryRelationResponseCollection {
  data: [FederalCountryEntity!]!
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = Action | Campaign | City | ComponentAccordionItem | ComponentActionsFilter | ComponentDemandsDemands | ComponentHelperBlocksLink | ComponentHelperBlocksMedia | ComponentMaterialItem | ComponentMenuMenu | ComponentSeoSeoSmo | ComponentSharedBlocksAccordion | ComponentSharedBlocksActions | ComponentSharedBlocksContact | ComponentSharedBlocksEmbed | ComponentSharedBlocksFundraisingbox | ComponentSharedBlocksHeading | ComponentSharedBlocksMaterial | ComponentSharedBlocksMedia | ComponentSharedBlocksMediaGallery | ComponentSharedBlocksNewsletter | ComponentSharedBlocksRichtext | ComponentSharedBlocksStageLarge | ComponentSharedBlocksStageMedium | ComponentSharedBlocksSubNavigation | ComponentSharedBlocksTeaserLarge | ComponentSharedBlocksTeasersSmall | ComponentSharedBlocksUnterbrecher | ComponentTeasersSmallItem | Country | FederalCountry | Group | I18NLocale | Menu | NewsEntry | Page | Redirect | SafeHarbour | Setting | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type Group {
  actions(filters: ActionFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ActionRelationResponseCollection
  city: CityEntityResponse
  content: [GroupContentDynamicZone]
  createdAt: DateTime
  image: ComponentHelperBlocksMedia
  locale: String
  localizations(filters: GroupFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): GroupRelationResponseCollection
  metadata: ComponentSeoSeoSmo
  publishedAt: DateTime
  updatedAt: DateTime
}

union GroupContentDynamicZone = ComponentSharedBlocksAccordion | ComponentSharedBlocksActions | ComponentSharedBlocksContact | ComponentSharedBlocksEmbed | ComponentSharedBlocksHeading | ComponentSharedBlocksMaterial | ComponentSharedBlocksMedia | ComponentSharedBlocksMediaGallery | ComponentSharedBlocksRichtext | ComponentSharedBlocksTeaserLarge | ComponentSharedBlocksTeasersSmall | ComponentSharedBlocksUnterbrecher | Error

scalar GroupContentDynamicZoneInput

type GroupEntity {
  attributes: Group
  id: ID
}

type GroupEntityResponse {
  data: GroupEntity
}

type GroupEntityResponseCollection {
  data: [GroupEntity!]!
  meta: ResponseCollectionMeta!
}

input GroupFiltersInput {
  actions: ActionFiltersInput
  and: [GroupFiltersInput]
  city: CityFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  image: ComponentHelperBlocksMediaFiltersInput
  locale: StringFilterInput
  localizations: GroupFiltersInput
  metadata: ComponentSeoSeoSmoFiltersInput
  not: GroupFiltersInput
  or: [GroupFiltersInput]
  publishedAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
}

input GroupInput {
  actions: [ID]
  city: ID
  content: [GroupContentDynamicZoneInput!]
  image: ComponentHelperBlocksMediaInput
  metadata: ComponentSeoSeoSmoInput
  publishedAt: DateTime
}

type GroupRelationResponseCollection {
  data: [GroupEntity!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Menu {
  createdAt: DateTime
  locale: String
  localizations: MenuRelationResponseCollection
  menu(filters: ComponentMenuMenuFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentMenuMenu]
  updatedAt: DateTime
}

type MenuEntity {
  attributes: Menu
  id: ID
}

type MenuEntityResponse {
  data: MenuEntity
}

type MenuEntityResponseCollection {
  data: [MenuEntity!]!
  meta: ResponseCollectionMeta!
}

input MenuFiltersInput {
  and: [MenuFiltersInput]
  createdAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: MenuFiltersInput
  menu: ComponentMenuMenuFiltersInput
  not: MenuFiltersInput
  or: [MenuFiltersInput]
  updatedAt: DateTimeFilterInput
}

input MenuInput {
  menu: [ComponentMenuMenuInput]
}

type MenuRelationResponseCollection {
  data: [MenuEntity!]!
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createAction(data: ActionInput!, locale: I18NLocaleCode): ActionEntityResponse
  createActionLocalization(data: ActionInput, id: ID, locale: I18NLocaleCode): ActionEntityResponse
  createCampaign(data: CampaignInput!, locale: I18NLocaleCode): CampaignEntityResponse
  createCampaignLocalization(data: CampaignInput, id: ID, locale: I18NLocaleCode): CampaignEntityResponse
  createCity(data: CityInput!, locale: I18NLocaleCode): CityEntityResponse
  createCityLocalization(data: CityInput, id: ID, locale: I18NLocaleCode): CityEntityResponse
  createCountry(data: CountryInput!, locale: I18NLocaleCode): CountryEntityResponse
  createCountryLocalization(data: CountryInput, id: ID, locale: I18NLocaleCode): CountryEntityResponse
  createFederalCountry(data: FederalCountryInput!, locale: I18NLocaleCode): FederalCountryEntityResponse
  createFederalCountryLocalization(data: FederalCountryInput, id: ID, locale: I18NLocaleCode): FederalCountryEntityResponse
  createGroup(data: GroupInput!, locale: I18NLocaleCode): GroupEntityResponse
  createGroupLocalization(data: GroupInput, id: ID, locale: I18NLocaleCode): GroupEntityResponse
  createMenuLocalization(data: MenuInput, id: ID, locale: I18NLocaleCode): MenuEntityResponse
  createNewsEntry(data: NewsEntryInput!, locale: I18NLocaleCode): NewsEntryEntityResponse
  createNewsEntryLocalization(data: NewsEntryInput, id: ID, locale: I18NLocaleCode): NewsEntryEntityResponse
  createPage(data: PageInput!, locale: I18NLocaleCode): PageEntityResponse
  createPageLocalization(data: PageInput, id: ID, locale: I18NLocaleCode): PageEntityResponse
  createRedirect(data: RedirectInput!): RedirectEntityResponse
  createSafeHarbour(data: SafeHarbourInput!, locale: I18NLocaleCode): SafeHarbourEntityResponse
  createSafeHarbourLocalization(data: SafeHarbourInput, id: ID, locale: I18NLocaleCode): SafeHarbourEntityResponse
  createSettingLocalization(data: SettingInput, id: ID, locale: I18NLocaleCode): SettingEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteAction(id: ID!, locale: I18NLocaleCode): ActionEntityResponse
  deleteCampaign(id: ID!, locale: I18NLocaleCode): CampaignEntityResponse
  deleteCity(id: ID!, locale: I18NLocaleCode): CityEntityResponse
  deleteCountry(id: ID!, locale: I18NLocaleCode): CountryEntityResponse
  deleteFederalCountry(id: ID!, locale: I18NLocaleCode): FederalCountryEntityResponse
  deleteGroup(id: ID!, locale: I18NLocaleCode): GroupEntityResponse
  deleteMenu(locale: I18NLocaleCode): MenuEntityResponse
  deleteNewsEntry(id: ID!, locale: I18NLocaleCode): NewsEntryEntityResponse
  deletePage(id: ID!, locale: I18NLocaleCode): PageEntityResponse
  deleteRedirect(id: ID!): RedirectEntityResponse
  deleteSafeHarbour(id: ID!, locale: I18NLocaleCode): SafeHarbourEntityResponse
  deleteSetting(locale: I18NLocaleCode): SettingEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateAction(data: ActionInput!, id: ID!, locale: I18NLocaleCode): ActionEntityResponse
  updateCampaign(data: CampaignInput!, id: ID!, locale: I18NLocaleCode): CampaignEntityResponse
  updateCity(data: CityInput!, id: ID!, locale: I18NLocaleCode): CityEntityResponse
  updateCountry(data: CountryInput!, id: ID!, locale: I18NLocaleCode): CountryEntityResponse
  updateFederalCountry(data: FederalCountryInput!, id: ID!, locale: I18NLocaleCode): FederalCountryEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateGroup(data: GroupInput!, id: ID!, locale: I18NLocaleCode): GroupEntityResponse
  updateMenu(data: MenuInput!, locale: I18NLocaleCode): MenuEntityResponse
  updateNewsEntry(data: NewsEntryInput!, id: ID!, locale: I18NLocaleCode): NewsEntryEntityResponse
  updatePage(data: PageInput!, id: ID!, locale: I18NLocaleCode): PageEntityResponse
  updateRedirect(data: RedirectInput!, id: ID!): RedirectEntityResponse
  updateSafeHarbour(data: SafeHarbourInput!, id: ID!, locale: I18NLocaleCode): SafeHarbourEntityResponse
  updateSetting(data: SettingInput!, locale: I18NLocaleCode): SettingEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type NewsEntry {
  content: [NewsEntryContentDynamicZone]!
  createdAt: DateTime
  image: ComponentHelperBlocksMedia
  locale: String
  localizations(filters: NewsEntryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewsEntryRelationResponseCollection
  metadata: ComponentSeoSeoSmo
  publication_date: Date
  publishedAt: DateTime
  slug: String
  title: String!
  type: ENUM_NEWSENTRY_TYPE
  updatedAt: DateTime
}

union NewsEntryContentDynamicZone = ComponentSharedBlocksAccordion | ComponentSharedBlocksActions | ComponentSharedBlocksContact | ComponentSharedBlocksEmbed | ComponentSharedBlocksHeading | ComponentSharedBlocksMaterial | ComponentSharedBlocksMedia | ComponentSharedBlocksMediaGallery | ComponentSharedBlocksNewsletter | ComponentSharedBlocksRichtext | ComponentSharedBlocksTeaserLarge | ComponentSharedBlocksTeasersSmall | ComponentSharedBlocksUnterbrecher | Error

scalar NewsEntryContentDynamicZoneInput

type NewsEntryEntity {
  attributes: NewsEntry
  id: ID
}

type NewsEntryEntityResponse {
  data: NewsEntryEntity
}

type NewsEntryEntityResponseCollection {
  data: [NewsEntryEntity!]!
  meta: ResponseCollectionMeta!
}

input NewsEntryFiltersInput {
  and: [NewsEntryFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  image: ComponentHelperBlocksMediaFiltersInput
  locale: StringFilterInput
  localizations: NewsEntryFiltersInput
  metadata: ComponentSeoSeoSmoFiltersInput
  not: NewsEntryFiltersInput
  or: [NewsEntryFiltersInput]
  publication_date: DateFilterInput
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input NewsEntryInput {
  content: [NewsEntryContentDynamicZoneInput!]
  image: ComponentHelperBlocksMediaInput
  metadata: ComponentSeoSeoSmoInput
  publication_date: Date
  publishedAt: DateTime
  slug: String
  title: String
  type: ENUM_NEWSENTRY_TYPE
}

type NewsEntryRelationResponseCollection {
  data: [NewsEntryEntity!]!
}

type Page {
  algolia_id: String
  campaign: CampaignEntityResponse
  content: [PageContentDynamicZone]
  createdAt: DateTime
  locale: String
  localizations(filters: PageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageRelationResponseCollection
  metadata: ComponentSeoSeoSmo
  parent: PageEntityResponse
  publishedAt: DateTime
  slug: String
  title: String!
  updatedAt: DateTime
}

union PageContentDynamicZone = ComponentSharedBlocksAccordion | ComponentSharedBlocksActions | ComponentSharedBlocksContact | ComponentSharedBlocksEmbed | ComponentSharedBlocksFundraisingbox | ComponentSharedBlocksHeading | ComponentSharedBlocksMaterial | ComponentSharedBlocksMedia | ComponentSharedBlocksMediaGallery | ComponentSharedBlocksNewsletter | ComponentSharedBlocksRichtext | ComponentSharedBlocksStageLarge | ComponentSharedBlocksStageMedium | ComponentSharedBlocksSubNavigation | ComponentSharedBlocksTeaserLarge | ComponentSharedBlocksTeasersSmall | ComponentSharedBlocksUnterbrecher | Error

scalar PageContentDynamicZoneInput

type PageEntity {
  attributes: Page
  id: ID
}

type PageEntityResponse {
  data: PageEntity
}

type PageEntityResponseCollection {
  data: [PageEntity!]!
  meta: ResponseCollectionMeta!
}

input PageFiltersInput {
  algolia_id: StringFilterInput
  and: [PageFiltersInput]
  campaign: CampaignFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: PageFiltersInput
  metadata: ComponentSeoSeoSmoFiltersInput
  not: PageFiltersInput
  or: [PageFiltersInput]
  parent: PageFiltersInput
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input PageInput {
  algolia_id: String
  campaign: ID
  content: [PageContentDynamicZoneInput!]
  metadata: ComponentSeoSeoSmoInput
  parent: ID
  publishedAt: DateTime
  slug: String
  title: String
}

type PageRelationResponseCollection {
  data: [PageEntity!]!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  action(id: ID, locale: I18NLocaleCode): ActionEntityResponse
  actions(filters: ActionFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ActionEntityResponseCollection
  campaign(id: ID, locale: I18NLocaleCode): CampaignEntityResponse
  campaigns(filters: CampaignFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CampaignEntityResponseCollection
  cities(filters: CityFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CityEntityResponseCollection
  city(id: ID, locale: I18NLocaleCode): CityEntityResponse
  countries(filters: CountryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): CountryEntityResponseCollection
  country(id: ID, locale: I18NLocaleCode): CountryEntityResponse
  federalCountries(filters: FederalCountryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): FederalCountryEntityResponseCollection
  federalCountry(id: ID, locale: I18NLocaleCode): FederalCountryEntityResponse
  group(id: ID, locale: I18NLocaleCode): GroupEntityResponse
  groups(filters: GroupFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): GroupEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  menu(locale: I18NLocaleCode): MenuEntityResponse
  newsEntries(filters: NewsEntryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): NewsEntryEntityResponseCollection
  newsEntry(id: ID, locale: I18NLocaleCode): NewsEntryEntityResponse
  page(id: ID, locale: I18NLocaleCode): PageEntityResponse
  pages(filters: PageFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageEntityResponseCollection
  redirect(id: ID): RedirectEntityResponse
  redirects(filters: RedirectFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): RedirectEntityResponseCollection
  safeHarbour(id: ID, locale: I18NLocaleCode): SafeHarbourEntityResponse
  safeHarbours(filters: SafeHarbourFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): SafeHarbourEntityResponseCollection
  setting(locale: I18NLocaleCode): SettingEntityResponse
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type Redirect {
  createdAt: DateTime
  from: String!
  to: String!
  type: ENUM_REDIRECT_TYPE!
  updatedAt: DateTime
}

type RedirectEntity {
  attributes: Redirect
  id: ID
}

type RedirectEntityResponse {
  data: RedirectEntity
}

type RedirectEntityResponseCollection {
  data: [RedirectEntity!]!
  meta: ResponseCollectionMeta!
}

input RedirectFiltersInput {
  and: [RedirectFiltersInput]
  createdAt: DateTimeFilterInput
  from: StringFilterInput
  id: IDFilterInput
  not: RedirectFiltersInput
  or: [RedirectFiltersInput]
  to: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input RedirectInput {
  from: String
  to: String
  type: ENUM_REDIRECT_TYPE
}

type RedirectRelationResponseCollection {
  data: [RedirectEntity!]!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type SafeHarbour {
  city: CityEntityResponse
  content: [SafeHarbourContentDynamicZone]
  createdAt: DateTime
  demands: ComponentDemandsDemands!
  image: ComponentHelperBlocksMedia
  locale: String
  localizations(filters: SafeHarbourFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): SafeHarbourRelationResponseCollection
  metadata: ComponentSeoSeoSmo
  publishedAt: DateTime
  since: Date
  updatedAt: DateTime
}

union SafeHarbourContentDynamicZone = ComponentSharedBlocksAccordion | ComponentSharedBlocksContact | ComponentSharedBlocksEmbed | ComponentSharedBlocksHeading | ComponentSharedBlocksMaterial | ComponentSharedBlocksMedia | ComponentSharedBlocksRichtext | ComponentSharedBlocksTeaserLarge | ComponentSharedBlocksTeasersSmall | ComponentSharedBlocksUnterbrecher | Error

scalar SafeHarbourContentDynamicZoneInput

type SafeHarbourEntity {
  attributes: SafeHarbour
  id: ID
}

type SafeHarbourEntityResponse {
  data: SafeHarbourEntity
}

type SafeHarbourEntityResponseCollection {
  data: [SafeHarbourEntity!]!
  meta: ResponseCollectionMeta!
}

input SafeHarbourFiltersInput {
  and: [SafeHarbourFiltersInput]
  city: CityFiltersInput
  createdAt: DateTimeFilterInput
  demands: ComponentDemandsDemandsFiltersInput
  id: IDFilterInput
  image: ComponentHelperBlocksMediaFiltersInput
  locale: StringFilterInput
  localizations: SafeHarbourFiltersInput
  metadata: ComponentSeoSeoSmoFiltersInput
  not: SafeHarbourFiltersInput
  or: [SafeHarbourFiltersInput]
  publishedAt: DateTimeFilterInput
  since: DateFilterInput
  updatedAt: DateTimeFilterInput
}

input SafeHarbourInput {
  city: ID
  content: [SafeHarbourContentDynamicZoneInput!]
  demands: ComponentDemandsDemandsInput
  image: ComponentHelperBlocksMediaInput
  metadata: ComponentSeoSeoSmoInput
  publishedAt: DateTime
  since: Date
}

type SafeHarbourRelationResponseCollection {
  data: [SafeHarbourEntity!]!
}

type Setting {
  createdAt: DateTime
  homepage: PageEntityResponse
  locale: String
  localizations: SettingRelationResponseCollection
  updatedAt: DateTime
}

type SettingEntity {
  attributes: Setting
  id: ID
}

type SettingEntityResponse {
  data: SettingEntity
}

type SettingEntityResponseCollection {
  data: [SettingEntity!]!
  meta: ResponseCollectionMeta!
}

input SettingFiltersInput {
  and: [SettingFiltersInput]
  createdAt: DateTimeFilterInput
  homepage: PageFiltersInput
  locale: StringFilterInput
  localizations: SettingFiltersInput
  not: SettingFiltersInput
  or: [SettingFiltersInput]
  updatedAt: DateTimeFilterInput
}

input SettingInput {
  homepage: ID
}

type SettingRelationResponseCollection {
  data: [SettingEntity!]!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
